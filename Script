local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")

-- Load Rayfield library
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua'))()

-- Create Rayfield window
local Window = Rayfield:CreateWindow({
    Name = "c00lVoid_8 Menu By: c00lVoid_8 And TIMOHA9399",
    LoadingTitle = "c00lVoid_8 Menu Version: 0.2",
    LoadingSubtitle = "By: c00lVoid_8",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil,
        FileName = "c00lVoid_8_Config"
    }
})

-- Create main tab
local Tab = Window:CreateTab("Main", nil) -- Icon can be added if needed

-- Universal chat function (supports old and new chat systems)
local function chatCmd(msg)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        -- New chat system
        TextChatService.TextChannels.RBXGeneral:SendAsync(msg)
    else
        -- Old chat system
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
    end
end

-- SyncAPI setup (shared for textures, Skybox, Unanchor, etc.)
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

-- Update char on player death
player.CharacterAdded:Connect(function(newCharacter)
    char = newCharacter
end)

local tool

for _, v in player:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

for _, v in game.ReplicatedStorage:GetDescendants() do
    if v.Name == "SyncAPI" then
        tool = v.Parent
    end
end

local remote = tool.SyncAPI.ServerEndpoint

function _(args)
    remote:InvokeServer(unpack(args))
end

function CreatePart(cf, parent)
    _( {"CreatePart", "Normal", cf, parent} )
end

function SetAnchor(part, state)
    _( {"SyncAnchor", { {["Part"] = part, ["Anchored"] = state} }} )
end

function AddMesh(part)
    _( {"CreateMeshes", { {["Part"] = part} }} )
end

function SetMesh(part, meshid)
    _( {"SyncMesh", { {["Part"] = part, ["MeshId"] = "rbxassetid://" .. meshid} }} )
end

function SetTexture(part, texid)
    _( {"SyncMesh", { {["Part"] = part, ["TextureId"] = "rbxassetid://" .. texid} }} )
end

function MeshResize(part, size)
    _( {"SyncMesh", { {["Part"] = part, ["Scale"] = size} }} )
end

function SetCollision(part, boolean)
    _( {"SyncCollision", { {["Part"] = part, ["CanCollide"] = boolean} }} )
end

function DestroyPart(part)
    _( {"Remove", {part}} )
end

function MovePart(part, cf)
    _( {"SyncMove", { {["Part"] = part, ["CFrame"] = cf} }} )
end

function Resize(part, size, cf)
    _( {"SyncResize", { {["Part"] = part, ["CFrame"] = cf, ["Size"] = size} }} )
end

function SetName(part, stringg)
    _( {"SetName", {part}, stringg} )
end

function Weld(part1, part2, lead)
    _( {"CreateWelds", {part1, part2}, lead} )
end

function SetLocked(part, boolean)
    _( {"SetLocked", {part}, boolean} )
end

function SetTrans(part, int)
    _( {"SyncMaterial", { {["Part"] = part, ["Transparency"] = int} }} )
end

function CreateSpotlight(part)
    _( {"CreateLights", { {["Part"] = part, ["LightType"] = "PointLight"} }} )
end

function SyncLighting(part, brightness, color)
    _( {"SyncLighting", { {["Part"] = part, ["LightType"] = "PointLight", ["Brightness"] = brightness, ["Color"] = color} }} )
end

function Color(part, color)
    _( {"SyncColor", { {["Part"] = part, ["Color"] = color, ["UnionColoring"] = false} }} )
end

function SpawnDecal(part, side)
    _( {"CreateTextures", { {["Part"] = part, ["Face"] = side, ["TextureType"] = "Decal"} }} )
end

function AddDecal(part, asset, side)
    _( {"SyncTexture", { {["Part"] = part, ["Face"] = side, ["TextureType"] = "Decal", ["Texture"] = "rbxassetid://" .. asset} }} )
end

-- Function 1: Change Textures (apply decals to all sides)
local function spam(id)
    for _, v in game.Workspace:GetDescendants() do
        if v:IsA("BasePart") then
            spawn(function()
                SetLocked(v, false)
                SpawnDecal(v, Enum.NormalId.Front)
                AddDecal(v, id, Enum.NormalId.Front)
                SpawnDecal(v, Enum.NormalId.Back)
                AddDecal(v, id, Enum.NormalId.Back)
                SpawnDecal(v, Enum.NormalId.Right)
                AddDecal(v, id, Enum.NormalId.Right)
                SpawnDecal(v, Enum.NormalId.Left)
                AddDecal(v, id, Enum.NormalId.Left)
                SpawnDecal(v, Enum.NormalId.Bottom)
                AddDecal(v, id, Enum.NormalId.Bottom)
                SpawnDecal(v, Enum.NormalId.Top)
                AddDecal(v, id, Enum.NormalId.Top)
            end)
        end
    end 
end

Tab:CreateButton({
    Name = "Change Textures",
    Callback = function()
        spam("97941139489452")
    end
})

-- Function 2: Change Skybox
local function Sky(id)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local cf = hrp.CFrame
    CreatePart(CFrame.new(cf.Position + Vector3.new(0, 6, 0)), workspace)
    for _, v in workspace:GetDescendants() do
        if v:IsA("BasePart") and v.Position == cf.Position + Vector3.new(0, 6, 0) then
            SetAnchor(v, true)
            AddMesh(v)
            SetMesh(v, "111891702759441")
            SetTexture(v, id)
            MeshResize(v, Vector3.new(8000, 8000, 8000))
        end
    end
end

Tab:CreateButton({
    Name = "Change Skybox",
    Callback = function()
        Sky("97941139489452")
    end
})

-- Function 3: Reset World (clear world, create Baseplate, spawn, and decal block)
Tab:CreateButton({
    Name = "Reset World",
    Callback = function()
        -- Clear world
        for _, obj in pairs(workspace:GetChildren()) do
            if obj ~= game.Players.LocalPlayer.Character then
                DestroyPart(obj)
            end
        end
        
        -- Create Baseplate
        local baseplateCF = CFrame.new(0, 0, 0)
        CreatePart(baseplateCF, workspace)
        for _, v in workspace:GetDescendants() do
            if v:IsA("BasePart") and v.Position == Vector3.new(0, 0, 0) then
                SetName(v, "Baseplate")
                Resize(v, Vector3.new(2048, 20, 2048), baseplateCF)
                SetAnchor(v, true)
            end
        end
        
        -- Create spawn
        local spawnCF = CFrame.new(0, 10, 0)
        CreatePart(spawnCF, workspace)
        for _, v in workspace:GetDescendants() do
            if v:IsA("BasePart") and v.Position == Vector3.new(0, 10, 0) then
                SetName(v, "SpawnLocation")
                Resize(v, Vector3.new(10, 1, 10), spawnCF)
                SetAnchor(v, true)
            end
        end
        
        -- Create block with decal (offset by 25 units on Z, resized)
        local blockCF = CFrame.new(0, 15, 25) -- Offset by 25 units on Z
        CreatePart(blockCF, workspace)
        for _, v in workspace:GetDescendants() do
            if v:IsA("BasePart") and v.Position == Vector3.new(0, 15, 25) then
                SetName(v, "DecalBlock")
                Resize(v, Vector3.new(10, 7, 5), blockCF) -- X=10 (left 5 + right 5), Y=7 (top 5 + bottom 2), Z=5
                SetAnchor(v, true)
                SpawnDecal(v, Enum.NormalId.Front)
                AddDecal(v, "97941139489452", Enum.NormalId.Front)
            end
        end
    end
})

-- Function 4: Create Baseplate (separate button)
Tab:CreateButton({
    Name = "Create Baseplate",
    Callback = function()
        local baseplateCF = CFrame.new(0, 0, 0)
        CreatePart(baseplateCF, workspace)
        for _, v in workspace:GetDescendants() do
            if v:IsA("BasePart") and v.Position == Vector3.new(0, 0, 0) then
                SetName(v, "Baseplate")
                Resize(v, Vector3.new(2048, 20, 2048), baseplateCF)
                SetAnchor(v, true)
            end
        end
    end
})

-- Function 5: Play Music (using chatCmd)
Tab:CreateButton({
    Name = "Play Music",
    Callback = function()
        chatCmd(";music 77484784570543 ;pitch 0.09 ;volume 10000")
    end
})

-- Function 6: Give Btools (using chatCmd)
Tab:CreateButton({
    Name = "Give Btools",
    Callback = function()
        chatCmd(";btools")
    end
})

-- Function 7: Disco (using chatCmd)
Tab:CreateButton({
    Name = "Disco",
    Callback = function()
        chatCmd(";disco ;fog 0.3")
    end
})

-- Function 8: Unanchor All
local function unanchorAll()
    for _, v in game.Workspace:GetDescendants() do
        spawn(function()
            SetLocked(v, false)
            SetAnchor(v, false)
        end)
    end
end

Tab:CreateButton({
    Name = "Unanchor All",
    Callback = function()
        unanchorAll()
    end
})

-- Function 9: Skeleton Skybox (cycle through specified texture IDs)
local skyboxConnection = nil
local skyboxPart = nil

local function skeletonSkybox()
    if skyboxConnection then
        skyboxConnection:Disconnect()
        skyboxConnection = nil
        if skyboxPart then
            DestroyPart(skyboxPart)
            skyboxPart = nil
        end
        return
    end
    
    local hrp = char:WaitForChild("HumanoidRootPart")
    local cf = CFrame.new(hrp.Position + Vector3.new(0, 6, 0))
    CreatePart(cf, workspace)
    for _, v in workspace:GetDescendants() do
        if v:IsA("BasePart") and v.Position == cf.Position then
            skyboxPart = v
            SetName(v, "SkeletonSkybox")
            SetAnchor(v, true)
            AddMesh(v)
            SetMesh(v, "111891702759441")
            MeshResize(v, Vector3.new(8000, 8000, 8000))
        end
    end
    
    local textureIds = {
        "114128626690223",
        "121121601582400",
        "103772438482613",
        "132406330493067",
        "132406330493067",
        "103772438482613",
        "121121601582400",
        "114128626690223"
    }
    local textureIndex = 1
    local changeInterval = 2 -- Seconds between texture changes
    local elapsedTime = 0
    
    skyboxConnection = RunService.Heartbeat:Connect(function(deltaTime)
        if not char or not char:FindFirstChild("HumanoidRootPart") or not skyboxPart then
            if skyboxConnection then
                skyboxConnection:Disconnect()
                skyboxConnection = nil
            end
            if skyboxPart then
                DestroyPart(skyboxPart)
                skyboxPart = nil
            end
            return
        end
        
        elapsedTime = elapsedTime + deltaTime
        if elapsedTime >= changeInterval then
            SetTexture(skyboxPart, textureIds[textureIndex])
            textureIndex = textureIndex % #textureIds + 1
            elapsedTime = 0
        end
        
        -- Update position to follow player
        local newCF = CFrame.new(char:WaitForChild("HumanoidRootPart").Position + Vector3.new(0, 6, 0))
        MovePart(skyboxPart, newCF)
    end)
end

Tab:CreateButton({
    Name = "Skeleton Skybox",
    Callback = function()
        skeletonSkybox()
    end
})

-- Function 10: Fire All (add fire effect to all blocks and players via SyncAPI)
local fireConnection = nil
local fireParts = {} -- Table to store parts with fire effect

local function fireAll()
    if fireConnection then
        fireConnection:Disconnect()
        fireConnection = nil
        for part, _ in pairs(fireParts) do
            if part then
                DestroyPart(part) -- Remove fire effect (PointLight is tied to a dummy part)
            end
        end
        fireParts = {}
        return
    end
    
    -- Add fire effect to all BaseParts in workspace (except player characters)
    for _, v in pairs(game.Workspace:GetDescendants()) do
        if v:IsA("BasePart") and not Players:GetPlayerFromCharacter(v.Parent) then
            spawn(function()
                SetLocked(v, false)
                CreateSpotlight(v)
                SyncLighting(v, 2, Color3.new(1, 0.5, 0)) -- Orange-red fire color
                fireParts[v] = true
            end)
        end
    end
    
    -- Add fire effect to all players' HumanoidRootPart
    for _, p in pairs(Players:GetPlayers()) do
        if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = p.Character.HumanoidRootPart
            spawn(function()
                SetLocked(hrp, false)
                CreateSpotlight(hrp)
                SyncLighting(hrp, 2, Color3.new(1, 0.5, 0)) -- Orange-red fire color
                fireParts[hrp] = true
            end)
        end
    end
    
    -- Monitor new players and workspace parts
    fireConnection = RunService.Heartbeat:Connect(function()
        -- Add fire to new players
        for _, p in pairs(Players:GetPlayers()) do
            if p.Character and p.Character:FindFirstChild("HumanoidRootPart") and not fireParts[p.Character.HumanoidRootPart] then
                local hrp = p.Character.HumanoidRootPart
                spawn(function()
                    SetLocked(hrp, false)
                    CreateSpotlight(hrp)
                    SyncLighting(hrp, 2, Color3.new(1, 0.5, 0))
                    fireParts[hrp] = true
                end)
            end
        end
        
        -- Add fire to new BaseParts
        for _, v in pairs(game.Workspace:GetDescendants()) do
            if v:IsA("BasePart") and not Players:GetPlayerFromCharacter(v.Parent) and not fireParts[v] then
                spawn(function()
                    SetLocked(v, false)
                    CreateSpotlight(v)
                    SyncLighting(v, 2, Color3.new(1, 0.5, 0))
                    fireParts[v] = true
                end)
            end
        end
    end)
end

Tab:CreateButton({
    Name = "Fire All",
    Callback = function()
        fireAll()
    end
})

-- Function 11: Vanish Blocks (blocks disappear under players' feet)
local vanishConnection = nil
local vanishBlocks = {} -- Table to store blocks and their timers

local function vanishBlocks()
    if vanishConnection then
        vanishConnection:Disconnect()
        vanishConnection = nil
        for block, _ in pairs(vanishBlocks) do
            if block then
                DestroyPart(block)
            end
        end
        vanishBlocks = {}
        return
    end
    
    vanishConnection = RunService.Heartbeat:Connect(function(deltaTime)
        for _, p in pairs(Players:GetPlayers()) do
            if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = p.Character.HumanoidRootPart
                local pos = hrp.Position
                local cf = CFrame.new(pos.X, pos.Y - 2, pos.Z) -- Block under player's feet
                local blockExists = false
                
                -- Check if a block already exists at this position
                for block, _ in pairs(vanishBlocks) do
                    if block and (block.Position - pos).Magnitude < 2 then
                        blockExists = true
                        break
                    end
                end
                
                if not blockExists then
                    -- Create a new block
                    CreatePart(cf, workspace)
                    for _, v in workspace:GetDescendants() do
                        if v:IsA("BasePart") and v.Position == cf.Position then
                            SetName(v, "VanishBlock")
                            Resize(v, Vector3.new(4, 0.2, 4), cf)
                            SetAnchor(v, true)
                            SetCollision(v, false)
                            SetTrans(v, 1) -- Invisible
                            vanishBlocks[v] = 1 -- Set timer to 1 second
                            break
                        end
                    end
                end
            end
        end
        
        -- Update timers and remove expired blocks
        for block, timer in pairs(vanishBlocks) do
            if block then
                timer = timer - deltaTime
                vanishBlocks[block] = timer
                if timer <= 0 then
                    DestroyPart(block)
                    vanishBlocks[block] = nil
                end
            end
        end
    end)
end

Tab:CreateButton({
    Name = "Vanish Blocks",
    Callback = function()
        vanishBlocks()
    end
})

-- Function 12: Titler (using chatCmd)
Tab:CreateButton({
    Name = "Titler",
    Callback = function()
        chatCmd(";titler me c00lVoid_8")
    end
})

-- Close menu
Tab:CreateButton({
    Name = "Close",
    Callback = function()
        if skyboxConnection then
            skyboxConnection:Disconnect()
            skyboxConnection = nil
            if skyboxPart then
                DestroyPart(skyboxPart)
                skyboxPart = nil
            end
        end
        if fireConnection then
            fireConnection:Disconnect()
            fireConnection = nil
            for part, _ in pairs(fireParts) do
                if part then
                    DestroyPart(part)
                end
            end
            fireParts = {}
        end
        if vanishConnection then
            vanishConnection:Disconnect()
            vanishConnection = nil
            for block, _ in pairs(vanishBlocks) do
                if block then
                    DestroyPart(block)
                end
            end
            vanishBlocks = {}
        end
        Rayfield:Destroy()
    end
})
